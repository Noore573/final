public void makemove(int num, int sn, int mn) {
        int temp = 0;

        while (mn > 0) {
            int s1index = p.getstoneindex(sn);
            int oldidex = p.getstoneindex(sn);
            s1index += num;
            p.playerstones[sn].stonepos = s1index;
            if (p.getstoneindex(sn) >= 1) {
                if (squares[p.positions[s1index] - 1].value != "   ") {
                    if (squares[p.positions[s1index] - 1].value.charAt(2) == '1') {
                        squares[p.positions[s1index] - 1].value += "1";
                    } else {
                        squares[p.positions[s1index] - 1].value = squares[p.positions[s1index] - 1].value.charAt(1)
                                + "-1";
                    }
                } else {
                    squares[p.positions[s1index] - 1].value = " 1 ";
                }

                Updategameboard(oldidex);
            }
            mn--;
            temp = s1index;
        }
        if (validmove(p.positions[temp] - 1, 'p') == false) {

        }
        System.out.println("Test:" + squares[p.positions[temp] - 1].pos);
    }





    //bad switch 

      // switch (turns) {

        //     case 1:
        //         System.out.println("switch!");
        //         if (turns == 0) {
        //             // PlayerTurn(1);
        //             gm.makemove2(1, 0, gm.p.playernumofmovements);
        //             // gm.makemove2(1, sn, 14);
        //             gm.p.playernumofmovements = 0;
        //             gm.p.playerkhal = false;
        //             gm.printarray(gm.board);
        //             turns++;
        //         } else if (turns == 1) {
        //             // Computerturn(1);
        //             gm.commakemove2(1, 0, gm.com.comnumofmovements);
        //             gm.com.comnumofmovements = 0;
        //             gm.com.comkhal = false;
        //             gm.printarray(gm.board);
        //             turns--;
        //         } else if (turns == 2) {

        //             System.out.println("No one will play :(\ntype r to replay");
        //             String r = s.nextLine();
        //             if (r == "r") {
        //                 FirstPlay();
        //             }
        //         }

        //         break;
        //     case 2:
        //         gm.printarray(gm.board);
        //         break;
        //     case 3:
        //         break;

        // }




///algorithm
import java.util.List;

class GameState {
    List<String> shells;
    int score;  // Your scoring mechanism

    public GameState(List<String> shells) {
        this.shells = shells;
        this.score = 0;  // Initialize the score based on your game's rules
    }
}

public class ShellGame {

    public static int evaluateState(GameState state) {
        // Implement the logic to evaluate the desirability of the state
        // based on your scoring system.
        // Update the score field in the GameState accordingly.
        // Return the score.
        return state.score;
    }

    public static int expectedMinimax(GameState state, int depth, boolean maximizingPlayer) {
        if (depth == 0 || gameIsTerminal(state)) {
            return evaluateState(state);
        }

        if (maximizingPlayer) {
            int maxEval = Integer.MIN_VALUE;
            for (GameState childState : generateChildStates(state)) {
                int eval = expectedMinimax(childState, depth - 1, false);
                maxEval = Math.max(maxEval, eval);
            }
            return maxEval;
        } else {
            int minEval = Integer.MAX_VALUE;
            for (GameState childState : generateChildStates(state)) {
                int eval = expectedMinimax(childState, depth - 1, true);
                minEval = Math.min(minEval, eval);
            }
            return minEval;
        }
    }

    public static GameState findBestMove(GameState initialState, int depth) {
        GameState bestMove = null;
        int maxEval = Integer.MIN_VALUE;

        for (GameState childState : generateChildStates(initialState)) {
            int eval = expectedMinimax(childState, depth - 1, false);
            if (eval > maxEval) {
                maxEval = eval;
                bestMove = childState;
            }
        }

        return bestMove;
    }

    public static boolean gameIsTerminal(GameState state) {
        // Implement the logic to check if the game is in a terminal state.
        // For example, check if a certain number of moves have been played.
        return false;
    }

    public static List<GameState> generateChildStates(GameState state) {
        // Implement the logic to generate all possible child states for a given state.
        // Use the get_next_states method provided earlier for the shell game.
        return null;
    }

    public static void main(String[] args) {
        // Example usage:
        List<String> initialShells = List.of("close", "close", "close", "close", "close", "close");
        GameState initialState = new GameState(initialShells);

        // Set the desired depth for the search
        int depth = 4;

        // Find the best move using the expected minimax algorithm
        GameState bestMove = findBestMove(initialState, depth);

        // Perform any actions based on the best move, update game state, etc.
    }



    /// old get_next_states
     public List<Gameboard> getNextStates() {
        List<Gameboard> nextStates = new ArrayList<>();
        int shakacount = 1;
        int baracount = 1;
        int dstcount = 1;
        int bngcount = 1;
        // shaka
        for (int i = 0; i < 13; i++) {
            Gameboard nextState = Deepcopy();
            // System.out.println("The current moves:"+nextState.com.comnumofmovements);
            System.out.println("Shaka count:" + shakacount);
            nextState.com.comnumofmovements += (6 * shakacount);
            if (shakacount < 5) {
                if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12) {
                    System.out.println("check1");
                    nextState.com.comnumofmovements += 2;
                } else if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13) {
                    System.out.println("check2");
                    nextState.com.comnumofmovements += 3;
                } else if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14) {
                    System.out.println("check3");
                    nextState.com.comnumofmovements += 4;
                }
                if (i == 2 || i == 5 || i == 8 || i == 11) {
                    System.out.println("check4 sc:" + shakacount);
                    shakacount++;
                }
            }
            nextStates.add(nextState);
            System.out.println("shaka test " + i + " :" + nextState.com.comnumofmovements);
        }
        // bara
        for (int i = 0; i < 13; i++) {
            Gameboard nextState = Deepcopy();
            nextState.com.comnumofmovements += (6 * baracount);
            if (baracount < 5) {
                if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12) {
                    nextState.com.comnumofmovements += 2;
                } else if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13) {
                    nextState.com.comnumofmovements += 3;
                } else if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14) {
                    nextState.com.comnumofmovements += 4;
                }
                if (i == 2 || i == 5 || i == 8 || i == 11) {
                    baracount++;
                }
            }
            nextStates.add(nextState);
            System.out.println("bara test " + i + " :" + nextState.com.comnumofmovements);
        }
        // dst extra move
        for (int i = 0; i < 13; i++) {
            Gameboard nextState = Deepcopy();
            nextState.com.comnumofmovements += (6 * dstcount);
            if (dstcount < 5) {
                if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12) {
                    nextState.com.comnumofmovements += 2;
                    nextState.com.comnumofmovements += 1;
                } else if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13) {
                    nextState.com.comnumofmovements += 3;
                    nextState.com.comnumofmovements += 1;
                } else if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14) {
                    nextState.com.comnumofmovements += 4;
                    nextState.com.comnumofmovements += 1;
                }
                if (i == 2 || i == 5 || i == 8 || i == 11) {
                    dstcount++;
                }
            }
            nextStates.add(nextState);
            System.out.println("bara test " + i + " :" + nextState.com.comnumofmovements);
        }
        // dst add stone
        for (int i = 0; i < 13; i++) {
            Gameboard nextState = Deepcopy();
            nextState.com.comnumofmovements += (6 * dstcount);
            nextState.khalmoveForNextState('c');
            if (dstcount < 5) {
                if (i == 0 || i == 3 || i == 6 || i == 9 || i == 12) {
                    nextState.com.comnumofmovements += 2;
                } else if (i == 1 || i == 4 || i == 7 || i == 10 || i == 13) {
                    nextState.com.comnumofmovements += 3;
                } else if (i == 2 || i == 5 || i == 8 || i == 11 || i == 14) {
                    nextState.com.comnumofmovements += 4;
                }
                if (i == 2 || i == 5 || i == 8 || i == 11) {
                    dstcount++;
                }
            }
            nextStates.add(nextState);
            System.out.println("bara test " + i + " :" + nextState.com.comnumofmovements);
        }

        return nextStates;
    }
}
